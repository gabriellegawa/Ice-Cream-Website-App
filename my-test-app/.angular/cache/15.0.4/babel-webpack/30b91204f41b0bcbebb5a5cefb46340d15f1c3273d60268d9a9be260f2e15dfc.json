{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Service } from '../../models/service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../app-service.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction CreateServiceFormComponent_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 6);\n    i0.ɵɵtext(1, \"Must be 3 characters\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateServiceFormComponent_span_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 6);\n    i0.ɵɵtext(1, \"Must be 3 characters\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class CreateServiceFormComponent {\n  constructor(service) {\n    this.service = service;\n    this.newService = new Service();\n    this.emitter = new EventEmitter();\n  }\n  ngOnInit() {\n    this.createServiceForm = new FormGroup({\n      veh_title: new FormControl(this.newService.title, [Validators.minLength(3), Validators.required]),\n      veh_description: new FormControl(this.newService.description, [Validators.minLength(3), Validators.required])\n    });\n  }\n  refresh() {\n    window.location.reload();\n  }\n  handleCreate() {\n    var today = new Date();\n    var todayString = String(today.getFullYear()) + '-' + String(today.getMonth() + 1) + '-' + String(today.getDate());\n    const input = this.createServiceForm.value;\n    const anotherNewService = new Service({\n      _id: input.veh__id,\n      title: input.veh_title,\n      description: input.veh_description,\n      dateAdded: todayString,\n      lastModified: todayString,\n      user: ''\n    });\n    this.service.registerService(anotherNewService).subscribe(data => console.log('Success!', data), error => console.error('error!', error));\n    console.log(anotherNewService);\n    this.handleClear();\n    this.refresh();\n    this.emitter.emit();\n  }\n  handleClear() {\n    this.createServiceForm.controls.veh_title.reset();\n    this.createServiceForm.controls.veh_description.reset();\n  }\n}\nCreateServiceFormComponent.ɵfac = function CreateServiceFormComponent_Factory(t) {\n  return new (t || CreateServiceFormComponent)(i0.ɵɵdirectiveInject(i1.AppServiceService));\n};\nCreateServiceFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CreateServiceFormComponent,\n  selectors: [[\"app-create-service-form\"]],\n  inputs: {\n    newService: \"newService\"\n  },\n  outputs: {\n    emitter: \"on-submit\"\n  },\n  decls: 16,\n  vars: 4,\n  consts: [[3, \"formGroup\"], [\"type\", \"text\", \"formControlName\", \"veh_title\"], [\"class\", \"error\", 4, \"ngIf\"], [\"type\", \"text\", \"formControlName\", \"veh_description\"], [3, \"disabled\", \"click\"], [3, \"click\"], [1, \"error\"]],\n  template: function CreateServiceFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵtext(1, \" Title: \");\n      i0.ɵɵelement(2, \"br\")(3, \"input\", 1);\n      i0.ɵɵtemplate(4, CreateServiceFormComponent_span_4_Template, 2, 0, \"span\", 2);\n      i0.ɵɵelement(5, \"br\");\n      i0.ɵɵtext(6, \" Description: \");\n      i0.ɵɵelement(7, \"br\")(8, \"input\", 3);\n      i0.ɵɵtemplate(9, CreateServiceFormComponent_span_9_Template, 2, 0, \"span\", 2);\n      i0.ɵɵelement(10, \"br\")(11, \"br\");\n      i0.ɵɵelementStart(12, \"button\", 4);\n      i0.ɵɵlistener(\"click\", function CreateServiceFormComponent_Template_button_click_12_listener() {\n        return ctx.handleCreate();\n      });\n      i0.ɵɵtext(13, \"Submit\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function CreateServiceFormComponent_Template_button_click_14_listener() {\n        return ctx.handleClear();\n      });\n      i0.ɵɵtext(15, \"Clear\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.createServiceForm);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ctx.createServiceForm.controls.veh_title.invalid && ctx.createServiceForm.controls.veh_title.dirty);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.createServiceForm.controls.veh_description.invalid && ctx.createServiceForm.controls.veh_description.dirty);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"disabled\", ctx.createServiceForm.invalid);\n    }\n  },\n  dependencies: [i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","FormControl","FormGroup","Validators","Service","i0","CreateServiceFormComponent","constructor","service","ngOnInit","createServiceForm","veh_title","newService","title","minLength","required","veh_description","description","refresh","window","location","reload","handleCreate","today","Date","todayString","String","getFullYear","getMonth","getDate","input","value","anotherNewService","_id","veh__id","dateAdded","lastModified","user","registerService","subscribe","data","console","log","error","handleClear","emitter","emit","controls","reset","selectors","inputs","outputs","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Gabriel Legawa\\OneDrive\\Documents\\Programming\\Projects\\Ice Cream Website App\\my-test-app\\src\\app\\services\\create-service-form\\create-service-form.component.ts","C:\\Users\\Gabriel Legawa\\OneDrive\\Documents\\Programming\\Projects\\Ice Cream Website App\\my-test-app\\src\\app\\services\\create-service-form\\create-service-form.component.html"],"sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { AppServiceService } from '../../app-service.service';\r\nimport { Service } from '../../models/service';\r\n\r\n@Component({\r\n  selector: 'app-create-service-form',\r\n  templateUrl: './create-service-form.component.html',\r\n  styleUrls: ['./create-service-form.component.scss']\r\n})\r\nexport class CreateServiceFormComponent implements OnInit {\r\n\r\n  createServiceForm !: FormGroup\r\n\r\n  @Input()\r\n  newService = new Service()\r\n\r\n  @Output(\"on-submit\")\r\n  emitter = new EventEmitter\r\n\r\n  constructor(private service : AppServiceService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.createServiceForm = new FormGroup({\r\n      veh_title: new FormControl(this.newService.title, [Validators.minLength(3), Validators.required]),\r\n      veh_description: new FormControl(this.newService.description, [Validators.minLength(3), Validators.required])\r\n    })\r\n  }\r\n\r\n  refresh(): void {\r\n    window.location.reload();\r\n  }\r\n\r\n  handleCreate() {\r\n    var today = new Date()\r\n    var todayString = String(today.getFullYear()) + '-' + String(today.getMonth()+1) + '-' + String(today.getDate())\r\n​\r\n    const input = this.createServiceForm.value\r\n    const anotherNewService = new Service({\r\n      _id: input.veh__id,\r\n      title: input.veh_title,\r\n      description: input.veh_description,\r\n      dateAdded: todayString,\r\n      lastModified: todayString,\r\n      user: ''\r\n    })\r\n    this.service.registerService(anotherNewService).subscribe(\r\n      data => console.log('Success!', data),\r\n      error => console.error('error!', error)\r\n    )\r\n    console.log(anotherNewService)\r\n\r\n    this.handleClear()\r\n    \r\n    this.refresh()\r\n\r\n    this.emitter.emit()\r\n  }\r\n\r\n  handleClear() {\r\n    this.createServiceForm.controls.veh_title.reset();\r\n    this.createServiceForm.controls.veh_description.reset();\r\n  }\r\n}\r\n","<form [formGroup]=\"createServiceForm\">\r\n    <!-- TODO: Improve error handling -->\r\n    Title: <br>\r\n    <input type=\"text\" formControlName=\"veh_title\" />\r\n    <span class=\"error\" *ngIf=\"createServiceForm.controls.veh_title.invalid &&\r\n    createServiceForm.controls.veh_title.dirty\">Must be 3 characters</span>\r\n    <br>\r\n    Description: <br>\r\n    <input type=\"text\" formControlName=\"veh_description\" />\r\n    <span class=\"error\" *ngIf=\"createServiceForm.controls.veh_description.invalid &&\r\n    createServiceForm.controls.veh_description.dirty\">Must be 3 characters</span>\r\n    <br>\r\n    <br/>\r\n    <button (click)=\"handleCreate()\" [disabled]=\"createServiceForm.invalid\">Submit</button>\r\n    <button (click)=\"handleClear()\">Clear</button>\r\n</form>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}